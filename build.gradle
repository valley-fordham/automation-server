import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id 'idea'
    id 'java'
    id 'java-library'
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id 'org.beryx.runtime' version '1.12.7'
}

group 'com.glenfordham'
version '22.2.'+gitCommitNumber()

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

sourceSets.main.java.srcDirs = ['src/main/java/']
// Configuration schema and Log4j2 XML resources
sourceSets.main.resources.srcDirs = [ "src/main/resources" ]
sourceSets.main.resources.includes = [ "**/*.xml", "**/*.xsd" ]

mainClassName = 'com.glenfordham.webserver.Application'
final OperatingSystem os = DefaultNativePlatform.currentOperatingSystem
final String sep = File.separator
final String toolsPath = "tools${sep}"

compileJava.dependsOn('buildJavaFromSchema')

jar {
    manifest {
        attributes(
                'Main-Class': mainClassName,
                'Implementation-Title': project.name,
                // Use 'version' so Shadow Jar gets version properly
                'Implementation-Version': version,
        )
    }
}

runtime {
    imageDir = file("${buildDir}${sep}automation-server")
    imageZip = file("${buildDir}${sep}automation-server-${version}.zip")

    targetPlatform("linux-s390x") {
        jdkHome = jdkDownload("https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.4.1%2B1/OpenJDK17U-jdk_s390x_linux_hotspot_17.0.4.1_1.tar.gz")
    }

    targetPlatform("win") {
        jdkHome = jdkDownload("https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.4.1%2B1/OpenJDK17U-jdk_x64_windows_hotspot_17.0.4.1_1.zip")
    }

    targetPlatform("mac") {
        jdkHome = jdkDownload("https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.4.1%2B1/OpenJDK17U-jdk_x64_mac_hotspot_17.0.4.1_1.tar.gz")
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.sun.mail:jakarta.mail:2.0.1'
    implementation 'commons-cli:commons-cli:1.5.0'
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'jakarta.activation:jakarta.activation-api:2.1.0'
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.0'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.18.0'
    implementation 'org.apache.tomcat.embed:tomcat-embed-core:10.0.23'
    implementation 'org.apache.tomcat.embed:tomcat-embed-jasper:10.0.23'
    implementation 'org.apache.tomcat:tomcat-jasper:10.0.23'
    implementation 'org.apache.tomcat:tomcat-jasper-el:10.0.23'
    implementation 'org.apache.tomcat:tomcat-jsp-api:10.0.23'
    implementation 'org.eclipse.angus:angus-activation:1.0.0'
    implementation 'org.glassfish.jaxb:jaxb-runtime:4.0.0'
}

// Generate JAXB objects from schema at build-time
task buildJavaFromSchema(type:Exec) {
    workingDir ".${sep}"
    final classOutput = 'com.glenfordham.webserver.automation.jaxb'
    final String configPath = sourceSets.main.resources.srcDirs[0].toPath().toString() + "${sep}com${sep}glenfordham${sep}webserver${sep}automation${sep}config${sep}"
    final String srcPath = sourceSets.main.java.srcDirs[0].toPath().toString()
    final bindings = 'bindings.xml'
    final config = 'config.xsd'
    if (os.isWindows()) {
        commandLine 'cmd', '/c', toolsPath+'jaxb-ri\\bin\\xjc.bat','-b',configPath+bindings,'-d',srcPath,'-p',classOutput,configPath+config,'-extension'
    } else if (os.isLinux()) {
        commandLine toolsPath + 'jaxb-ri/bin/xjc.sh','-b',configPath+bindings,'-d',srcPath,'-p',classOutput,configPath+config,'-extension'
    } else {
        throw new GradleException("Unable to build with OS: " + os.toString())
    }
}

static def gitCommitNumber() {
    String commitNumber = "git rev-list --count HEAD --no-merges".execute().text.toString()
    if (commitNumber.trim().isEmpty()) {
        return 0
    } else {
        return commitNumber.trim().toInteger()
    }
}

task deleteGeneratedFiles(type: Delete) {
    delete fileTree(dir: sourceSets.main.java.srcDirs[0].toPath().toString() + "${sep}com${sep}glenfordham${sep}webserver${sep}automation${sep}jaxb${sep}",
            // Ensure that only generated files are deleted
            exclude: { FileTreeElement details ->
                details.file.name.contains('JaxbObject') || details.file.name.contains('package-info')
            }
    )
}
clean.dependsOn(deleteGeneratedFiles)
