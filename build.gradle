import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id 'idea'
    id 'java'
    id 'java-library'
    id "com.github.johnrengelman.shadow" version "6.0.0"
    id 'org.beryx.runtime' version '1.11.3'
}

group 'com.glenfordham'
version '1.0.'+gitCommitNumber()

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

sourceSets.main.java.srcDirs = ['src/main/java/']
// Configuration schema and Log4j2 XML resources
sourceSets.main.resources.srcDirs = [ "src/main/resources" ]
sourceSets.main.resources.includes = [ "**/*.xml", "**/*.xsd" ]

mainClassName = 'com.glenfordham.webserver.Application'
final OperatingSystem os = DefaultNativePlatform.currentOperatingSystem
final String sep = File.separator
final String toolsPath = "tools${sep}"

compileJava.dependsOn('buildJavaFromSchema')

jar {
    manifest {
        attributes(
                'Main-Class': mainClassName,
                'Implementation-Title': project.name,
                // Use 'version' so Shadow Jar gets version properly
                'Implementation-Version': version,
        )
    }
}

runtime {
    imageDir = file("${buildDir}${sep}automation-server")
    imageZip = file("${buildDir}${sep}automation-server-${version}.zip")
    targetPlatform("linux-s390x") {
        jdkHome = jdkDownload("https://github.com/AdoptOpenJDK/openjdk14-binaries/releases/download/jdk-14.0.1%2B7.1/OpenJDK14U-jdk_x64_windows_hotspot_14.0.1_7.zip")
    }

    targetPlatform("win") {
        jdkHome = jdkDownload("https://github.com/AdoptOpenJDK/openjdk14-binaries/releases/download/jdk-14.0.1%2B7.1/OpenJDK14U-jdk_x64_windows_hotspot_14.0.1_7.zip")
    }

    targetPlatform("mac") {
        jdkHome = jdkDownload("https://github.com/AdoptOpenJDK/openjdk14-binaries/releases/download/jdk-14.0.1%2B7/OpenJDK14U-jdk_x64_mac_hotspot_14.0.1_7.tar.gz")
    }
}

repositories {
    mavenCentral()
}

dependencies {
    final String tomcatVersion = '9.0.36'

    testImplementation 'junit:junit:4.12'

    implementation 'com.sun.mail:javax.mail:1.6.2'
    implementation 'commons-cli:commons-cli:1.4'
    implementation 'commons-io:commons-io:2.7'
    implementation 'jakarta.activation:jakarta.activation-api:2.0.0'
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:3.0.0'
    implementation 'org.apache.commons:commons-lang3:3.11'
    implementation 'org.apache.logging.log4j:log4j-core:2.13.3'
    implementation 'org.apache.tomcat.embed:tomcat-embed-core:'+tomcatVersion
    implementation 'org.apache.tomcat.embed:tomcat-embed-jasper:'+tomcatVersion
    implementation 'org.apache.tomcat:tomcat-jasper:'+tomcatVersion
    implementation 'org.apache.tomcat:tomcat-jasper-el:'+tomcatVersion
    implementation 'org.apache.tomcat:tomcat-jsp-api:'+tomcatVersion
    implementation 'org.glassfish.jaxb:jaxb-runtime:3.0.0'
}

// Generate JAXB objects from schema at build-time
task buildJavaFromSchema(type:Exec) {
    workingDir ".${sep}"
    final classOutput = 'com.glenfordham.webserver.automation.jaxb'
    final String configPath = sourceSets.main.resources.srcDirs[0].toPath().toString() + "${sep}com${sep}glenfordham${sep}webserver${sep}automation${sep}config${sep}"
    final String srcPath = sourceSets.main.java.srcDirs[0].toPath().toString()
    final bindings = 'bindings.xml'
    final config = 'config.xsd'
    if (os.isWindows()) {
        commandLine 'cmd', '/c', toolsPath+'jaxb-ri\\bin\\xjc.bat','-b',configPath+bindings,'-d',srcPath,'-p',classOutput,configPath+config,'-extension'
    } else if (os.isLinux()) {
        commandLine toolsPath + 'jaxb-ri/bin/xjc.sh','-b',configPath+bindings,'-d',srcPath,'-p',classOutput,configPath+config,'-extension'
    } else {
        throw new GradleException("Unable to build with OS: " + os.toString())
    }
}

static def gitCommitNumber() {
    String commitNumber = "git rev-list --count HEAD --no-merges".execute().text.toString()
    if (commitNumber.trim().isEmpty()) {
        return 0
    } else {
        return commitNumber.trim().toInteger()
    }
}